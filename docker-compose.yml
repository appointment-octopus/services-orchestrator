version: "3.8"

services:
  database:
    image: postgres
    restart: on-failure
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - database-data:/var/lib/postgresql/data
      - ./docs/db/create.sql:/docker-entrypoint-initdb.d/create.sql
      - ./docs/db/popula.sql:/docker-entrypoint-initdb.d/popula.sql


  redis:
    image: redis
    depends_on:
      - database
    ports:
      - 6379:6379


  auth-api1:
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    depends_on:
      - database
      - redis
    volumes:
      - ./auth:/auth
    ports:
      - 5000:5000
    env_file:
      - .env
    entrypoint: ["/bin/bash", "./entrypoints/build_app.sh"]


  auth-api2:
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    depends_on:
      - auth-api1
    volumes:
      - ./auth:/auth
    ports:
      - 5001:5000
    env_file:
      - .env
    entrypoint: ["/bin/bash", "./entrypoints/build_app.sh"]


  auth-api3:
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    depends_on:
      - auth-api2
    volumes:
      - ./auth:/auth
    ports:
      - 5002:5000
    env_file:
      - .env
    entrypoint: ["/bin/bash", "./entrypoints/build_app.sh"]


  appointments:
    build:
      context: ./appointments
      dockerfile: Dockerfile
    depends_on:
      - auth-api3
    restart: on-failure:10
    volumes:
      - ./appointments:/appointments
    ports:
      - 3000:3000
    env_file:
      - .env

  nginx:
    build:
      dockerfile: ./Dockerfile.nginx
      context: ./auth
    ports: 
      - 80:80
      - 443:443
    depends_on:
      - appointments
 
volumes:
  database-data:

